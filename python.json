{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"HEADER":{
        "prefix": "header",
        "body": [
        "#!/usr/bin/env python",
        "# -*- encoding: utf-8 -*-",
        "'''",
        "@File    :   $TM_FILENAME",
        "@Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
        "@Author  :   Qi Yang",
        "@Version :   1.0",
        "@Describtion:   None",
        
        "'''",
        "",
        "# here put the import lib",
        "$0"
    ]},
    "CLASS":{
        "prefix":"class",
        "body":[
        "class A(object):",
        "    def __init__(self):",
        "        pass",
        "    def method1(self):",
        "        pass",
        "    def method2(self):",
        "        pass"
        ]
    },
    "LOG":{
        "prefix": "log",
        "body":[
        "logging.basicConfig(",
        "   level = logging.INFO,",
        "   format ='%(asctime)s - %(levelname)s - %(message)s',",
        "   filename = logfile,",
        "   filemode = 'a'",
        ")"
        ],
        "description": "output log"
    },
    "Parser":{
        "prefix": "parser",
        "body":[
        "def args_parser():",
        "   import argparse",
        "   parser=argparse.ArgumentParser(description='')",
        "   parser.add_argument('--a',nargs='?',default='',help='')",
        "   parser.add_argument('--b',nargs='?',default= 1,help='')",
        "   args=parser.parse_args()",
        "   return args"
        ],
        "description": "parse argument"
    },
    "DEF": {
        "prefix": "def",
        "body": [
            "def $1($2):",
            "    \"\"\"",
            "    param $2:",
            "    return:",
            "    \"\"\"",
            "    $0"
        ],
    },
    "For in enumerator": {
        "prefix": "for/enum",
        "body": [
            "for ${1:index}, ${2:item} in enumerate(${3:array}):",
            "    ${4:pass}"
        ],
        "description": "For statement with enumerator"
    }
}
